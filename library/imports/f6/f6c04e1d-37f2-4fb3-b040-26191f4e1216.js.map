{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\Script\\SDK\\sound/assets\\Script\\SDK\\sound\\MusicManager.js"],"names":["MusicManagerName","MusicManager","sourcePool","musicFlag","cc","sys","localStorage","getItem","log","GlobalEvent","instance","addEventListener","EVENT_HIDE","eventHide","EVENT_SHOW","eventShow","CHANGE_AD_STATE","changeAdState","state","RewardADState","close","getMusicFlag","openName","pause","play","audioEngine","stopMusic","resume","name","setItem","value","tempName","stop","isLoop","loader","loadRes","AudioClip","err","res","audioId","playMusic","setFinishCallback","bind","isPlaying","pauseMusic","resumeMusic","count","setMusicVolume","isMusicPlaying","ins"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AACA,IAAIA,mBAAmB,qBAAvB;;IACqBC;AAUjB,4BAAc;AAAA;;AAAA,aAPdC,UAOc,GAPD,EAOC;AAAA,aAFdC,SAEc,GAFF,CAEE;;AACV,aAAKA,SAAL,GAAiBC,GAAGC,GAAH,CAAOC,YAAP,CAAoBC,OAApB,CAA4BP,gBAA5B,CAAjB;AACA,aAAKG,SAAL,GAAiB,KAAKA,SAAL,IAAkB,CAAnC;AACAC,WAAGI,GAAH,CAAO,2BAAP,EAAmC,KAAKL,SAAxC;AACAM,8BAAYC,QAAZ,GAAuBC,gBAAvB,CAAwCF,sBAAYG,UAApD,EAAgE,KAAKC,SAArE,EAAgF,IAAhF;AACAJ,8BAAYC,QAAZ,GAAuBC,gBAAvB,CAAwCF,sBAAYK,UAApD,EAAgE,KAAKC,SAArE,EAAgF,IAAhF;AACAN,8BAAYC,QAAZ,GAAuBC,gBAAvB,CAAwCF,sBAAYO,eAApD,EAAqE,KAAKC,aAA1E,EAAyF,IAAzF;AACH;;;;sCAaaC,OAAO;AACjBd,eAAGI,GAAH,CAAO,iBAAP,EAAyBU,KAAzB;AACA,gBAAIA,SAASC,4BAAcC,KAA3B,EAAkC;AAC9B,qBAAKL,SAAL;AACH,aAFD,MAEO;AACH,qBAAKF,SAAL;AACH;AACJ;;;oCAEW;AACRT,eAAGI,GAAH,CAAO,gCAAP,EAAyC,KAAKa,YAAL,EAAzC;AACA,gBAAI,KAAKA,YAAL,MAAuB,KAAKC,QAAhC,EAA0C;AACtC,qBAAKC,KAAL;AACH;AACJ;;;oCAEW;AACR,gBAAIL,QAAQC,4BAAcC,KAA1B,CADQ,CACwB;AAChC;AACA;AACA;AACAhB,eAAGI,GAAH,CAAO,gCAAP,EAAyC,KAAKa,YAAL,EAAzC;AACA,gBAAI,KAAKA,YAAL,MAAuBH,SAASC,4BAAcC,KAAlD,EAAyD;AACrD,oBAAI,KAAKE,QAAT,EAAmB;AACf,yBAAKE,IAAL,CAAU,KAAKF,QAAf;AACH;;AAED;AACH,aAND,MAMO;AACHlB,mBAAGqB,WAAH,CAAeC,SAAf;AACH;AACJ;;;oCAEW;AACR,gBAAI,KAAKJ,QAAT,EAAmB;AACf,qBAAKE,IAAL,CAAU,KAAKF,QAAf;AACH,aAFD,MAEO;AACH,qBAAKK,MAAL;AACH;AACJ;;;qCAEY;AACT,iBAAKJ,KAAL;AACH;;;uCAEc;AACX,mBAAO,KAAKpB,SAAL,IAAkB,CAAzB;AACH;;;6BAIIyB,MAAM;AACP;AACA,iBAAKzB,SAAL,GAAiB,CAAjB;AACA,iBAAK0B,OAAL,CAAa,KAAK1B,SAAlB;AACA,iBAAKqB,IAAL,CAAUI,IAAV;AACH;;;gCAEOE,OAAO;AACX1B,eAAGC,GAAH,CAAOC,YAAP,CAAoBuB,OAApB,CAA4B7B,gBAA5B,EAA8C8B,KAA9C;AACH;;;gCAEO;AACJ;AACA;AACA,iBAAKD,OAAL,CAAa,CAAb;AACA,gBAAI,KAAKE,QAAT,EAAmB;AACf,qBAAKC,IAAL,CAAU,KAAKD,QAAf;AACA,qBAAKA,QAAL,GAAgB,IAAhB;AACH;AACD,iBAAK5B,SAAL,GAAiBC,GAAGC,GAAH,CAAOC,YAAP,CAAoBC,OAApB,CAA4BP,gBAA5B,CAAjB;AACAI,eAAGI,GAAH,CAAO,sBAAP,EAA8B,KAAKL,SAAnC;AACH;;;6BAEIyB,MAAoB;AAAA;;AAAA,gBAAfK,MAAe,uEAAN,IAAM;;AACrB,iBAAKX,QAAL,GAAgBM,IAAhB;AACA;AACA;AACA;AACA,gBAAI,KAAKG,QAAT,EAAmB;AACf,qBAAKC,IAAL,CAAU,KAAKD,QAAf;AACA,qBAAKA,QAAL,GAAgB,IAAhB;AACH;AACD,iBAAKA,QAAL,GAAgBH,IAAhB;AACAxB,eAAG8B,MAAH,CAAUC,OAAV,CAAkBP,IAAlB,EAAuBxB,GAAGgC,SAA1B,EAAoC,UAACC,GAAD,EAAKC,GAAL,EAAW;AAC3C,oBAAGD,GAAH,EAAO;AACH;AACAjC,uBAAGI,GAAH,CAAO,kBAAP,EAA0B6B,GAA1B;AACA;AACH;;AAEA;AACA,oBAAIE,UAAUnC,GAAGqB,WAAH,CAAee,SAAf,CAAyBF,GAAzB,EAA8BL,MAA9B,CAAd;AACA,sBAAK/B,UAAL,CAAgB0B,IAAhB,IAAwBW,OAAxB;AACA,oBAAI,CAACN,MAAL,EAAa;AACT7B,uBAAGqB,WAAH,CAAegB,iBAAf,CAAiCF,OAAjC,EAA0C,MAAKP,IAAL,CAAUU,IAAV,QAAqBd,IAArB,CAA1C;AACH;AACL,aAbD;AAgBH;;;gCAEO;AACJ,gBAAI,CAAC,KAAKe,SAAL,EAAL,EAAuB;AACnB;AACH;;AAEDvC,eAAGqB,WAAH,CAAemB,UAAf;AAGH;;;iCAEQ;AACL,gBAAI,KAAKD,SAAL,EAAJ,EAAsB;AAClBvC,mBAAGI,GAAH,CAAO,qBAAP;AACA;AACH;;AAEDJ,eAAGqB,WAAH,CAAeoB,WAAf;AAGH;;;6BAEIjB,MAAM;AACP,gBAAI,CAAC,KAAKe,SAAL,EAAL,EAAuB;AACnB;AACH;AACDvC,eAAGqB,WAAH,CAAeC,SAAf;AACA,gBAAIE,IAAJ,EAAU;AACN,oBAAIW,UAAU,KAAKrC,UAAL,CAAgB0B,IAAhB,CAAd;AACA,oBAAIW,OAAJ,EAAa;AACT,yBAAKrC,UAAL,CAAgB0B,IAAhB,IAAwB,IAAxB;AACH;AACJ;AAEJ;;;kCAESkB,OAAO;AACb1C,eAAGqB,WAAH,CAAesB,cAAf,CAA8BD,KAA9B;AACH;;;oCAEW;AACR,mBAAO1C,GAAGqB,WAAH,CAAeuB,cAAf,EAAP;AACH;;;mCAxJiB;AACd,gBAAI,CAAC,KAAKC,GAAV,EAAe;AACX,qBAAKA,GAAL,GAAW,IAAIhD,YAAJ,EAAX;AACH;AACD,mBAAO,KAAKgD,GAAZ;AACH;;;;;;kBA1BgBhD","file":"MusicManager.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\SDK\\sound","sourcesContent":["import { RewardADState } from \"../base/BaseRewardAd\";\nimport GlobalEvent from \"../event/GlobalEvent\";\nlet MusicManagerName = 'MusicManagerNamexxx'\nexport default class MusicManager {\n\n\n    sourcePool = {}\n\n    tempName;\n    openName\n\n    musicFlag = 1;\n\n    constructor() {\n        this.musicFlag = cc.sys.localStorage.getItem(MusicManagerName)\n        this.musicFlag = this.musicFlag || 1;\n        cc.log('MusicManager constructor ',this.musicFlag)\n        GlobalEvent.instance().addEventListener(GlobalEvent.EVENT_HIDE, this.eventHide, this)\n        GlobalEvent.instance().addEventListener(GlobalEvent.EVENT_SHOW, this.eventShow, this)\n        GlobalEvent.instance().addEventListener(GlobalEvent.CHANGE_AD_STATE, this.changeAdState, this)\n    }\n\n    static ins;\n\n    static instance() {\n        if (!this.ins) {\n            this.ins = new MusicManager();\n        }\n        return this.ins;\n    }\n\n\n\n    changeAdState(state) {\n        cc.log(' changeAdState ',state)\n        if (state == RewardADState.close) {\n            this.eventShow();\n        } else {\n            this.eventHide();\n        }\n    }\n\n    eventHide() {\n        cc.log(' eventHide this.getMusicFlag()', this.getMusicFlag())\n        if (this.getMusicFlag() && this.openName) {\n            this.pause();\n        }\n    }\n\n    eventShow() {\n        let state = RewardADState.close // 如果广告没有关闭，回来也不应该有声音\n        // if (SDKManager.getChannel()) {\n        //     state = SDKManager.getChannel().getRewardAdState();\n        // }\n        cc.log(' eventShow this.getMusicFlag()', this.getMusicFlag())\n        if (this.getMusicFlag() && state == RewardADState.close) {\n            if (this.openName) {\n                this.play(this.openName);\n            }\n\n            // this.resume();\n        } else {\n            cc.audioEngine.stopMusic();\n        }\n    }\n\n    musicOpen() {\n        if (this.openName) {\n            this.play(this.openName)\n        } else {\n            this.resume();\n        }\n    }\n\n    musicClose() {\n        this.pause();\n    }\n\n    getMusicFlag() {\n        return this.musicFlag == 1;\n    }\n\n\n\n    open(name) {\n        // this.audioManager.setMusicFlag(true);\n        this.musicFlag = 1;\n        this.setItem(this.musicFlag)\n        this.play(name);\n    }\n\n    setItem(value) {\n        cc.sys.localStorage.setItem(MusicManagerName, value)\n    }\n\n    close() {\n        // this.audioManager.setMusicFlag(false);\n        // this.musicFlag = 2;\n        this.setItem(2)\n        if (this.tempName) {\n            this.stop(this.tempName);\n            this.tempName = null;\n        }\n        this.musicFlag = cc.sys.localStorage.getItem(MusicManagerName)\n        cc.log(' close musicFlag is ',this.musicFlag)\n    }\n\n    play(name,isLoop = true) {\n        this.openName = name;\n        // if (this.audioManager.getMusicVolume() == 0) {\n        //     return;\n        // }\n        if (this.tempName) {\n            this.stop(this.tempName);\n            this.tempName = null;\n        }\n        this.tempName = name;\n        cc.loader.loadRes(name,cc.AudioClip,(err,res)=>{\n            if(err){\n                //console.log(\"AudioSource err \",err)\n                cc.log(\"AudioSource err \",err);\n                return ;\n            }\n\n             // this.openName = null;\n             let audioId = cc.audioEngine.playMusic(res, isLoop);\n             this.sourcePool[name] = audioId;\n             if (!isLoop) {\n                 cc.audioEngine.setFinishCallback(audioId, this.stop.bind(this, name));\n             }\n        });\n\n\n    }\n\n    pause() {\n        if (!this.isPlaying()) {\n            return;\n        }\n\n        cc.audioEngine.pauseMusic();\n\n\n    }\n\n    resume() {\n        if (this.isPlaying()) {\n            cc.log(' is already playing')\n            return;\n        }\n\n        cc.audioEngine.resumeMusic();\n\n\n    }\n\n    stop(name) {\n        if (!this.isPlaying()) {\n            return;\n        }\n        cc.audioEngine.stopMusic();\n        if (name) {\n            let audioId = this.sourcePool[name];\n            if (audioId) {\n                this.sourcePool[name] = null;\n            }\n        }\n\n    }\n\n    setVolume(count) {\n        cc.audioEngine.setMusicVolume(count);\n    }\n\n    isPlaying() {\n        return cc.audioEngine.isMusicPlaying();\n    }\n\n}"]}