{"version":3,"sources":["EventDispatcher.js"],"names":["EventDispatcher","eventMap","eventName","callback","target","list","push","handler","has","index","length","element","splice","data","data2","data3","forEach","call"],"mappings":";;;;;;;;;;;;;;IAEqBA;AAIjB,+BAAa;AAAA;;AAAA,aAFbC,QAEa,GAFF,EAEE;;AACT,aAAKA,QAAL,GAAgB,EAAhB;AACH;;;;yCAEgBC,WAAUC,UAAWC,QAAO;AACzC;AACA,gBAAIC,OAAO,KAAKJ,QAAL,CAAcC,SAAd,CAAX;AACA,gBAAG,CAACG,IAAJ,EAAS;AACLA,uBAAO,EAAP;AACA,qBAAKJ,QAAL,CAAcC,SAAd,IAA2BG,IAA3B;AACA;AACAA,qBAAKC,IAAL,CAAU,EAACC,SAAQJ,QAAT,EAAkBC,QAAOA,MAAzB,EAAV;AACH,aALD,MAKK;AACD,oBAAG,CAAC,KAAKI,GAAL,CAASN,SAAT,EAAmBC,QAAnB,EAA4BC,MAA5B,CAAJ,EAAwC;AACpC;AACAC,yBAAKC,IAAL,CAAU,EAACC,SAAQJ,QAAT,EAAkBC,QAAOA,MAAzB,EAAV;AACH;AACJ;AACJ;;;4BAEGF,WAAUC,UAASC,QAAO;AAC1B,gBAAIC,OAAQ,KAAKJ,QAAL,CAAcC,SAAd,CAAZ;AACA;AACA,gBAAGG,IAAH,EAAQ;AACJ,qBAAK,IAAII,QAAQ,CAAjB,EAAoBA,QAAQJ,KAAKK,MAAjC,EAAyCD,OAAzC,EAAkD;AAC9C,wBAAME,UAAUN,KAAKI,KAAL,CAAhB;AACA,wBAAGE,QAAQJ,OAAR,KAAoBJ,QAApB,IAAgCQ,QAAQP,MAAR,KAAmBA,MAAtD,EAA6D;AACzD,+BAAOO,OAAP;AACH;AACJ;AACJ;AACD,mBAAO,IAAP;AACH;;;4CAEmBT,WAAWC,UAASC,QAAO;AAC3C,gBAAIC,OAAO,KAAKJ,QAAL,CAAcC,SAAd,CAAX;AACA,gBAAGG,IAAH,EAAQ;AACJ,qBAAK,IAAII,QAAQ,CAAjB,EAAoBA,QAAQJ,KAAKK,MAAjC,EAAyCD,OAAzC,EAAkD;AAC9C,wBAAME,UAAUN,KAAKI,KAAL,CAAhB;AACA,wBAAGE,QAAQJ,OAAR,KAAoBJ,QAApB,IAAgCQ,QAAQP,MAAR,KAAmBA,MAAtD,EAA6D;AACzDC,6BAAKO,MAAL,CAAYH,KAAZ,EAAkB,CAAlB;AACA;AACH;AACJ;AACJ;AACJ;;;gCAEQP,WAAUW,MAAKC,OAAMC,OAAM;AAChC,gBAAIV,OAAQ,KAAKJ,QAAL,CAAcC,SAAd,CAAZ;AACA,gBAAGG,IAAH,EAAQ;AACJA,qBAAKW,OAAL,CAAa,mBAAW;AACpBL,4BAAQJ,OAAR,CAAgBU,IAAhB,CAAqBN,QAAQP,MAA7B,EAAoCS,IAApC,EAAyCC,KAAzC,EAA+CC,KAA/C;AACH,iBAFD;AAGH;AACJ;;;iDAEuB;AACpB,iBAAKd,QAAL,GAAgB,EAAhB;AACH;;;kDAEyBC,WAAU;AAChC,iBAAKD,QAAL,CAAcC,SAAd,IAA2B,EAA3B;AACH;;;;;;kBAlEgBF","file":"EventDispatcher.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\Script\\SDK\\event","sourcesContent":["\n\nexport default class EventDispatcher {\n\n    eventMap = {};\n\n    constructor(){\n        this.eventMap = {}\n    }\n\n    addEventListener(eventName,callback , target){\n        // cc.log('EventDispatcher addEventListener ',eventName)\n        let list = this.eventMap[eventName];\n        if(!list){\n            list = [];\n            this.eventMap[eventName] = list;\n            // cc.log('EventDispatcher addEventListener 111111',eventName)\n            list.push({handler:callback,target:target});\n        }else{\n            if(!this.has(eventName,callback,target)){\n                // cc.log('EventDispatcher addEventListener 22222222',eventName)\n                list.push({handler:callback,target:target});\n            }\n        }\n    }\n \n    has(eventName,callback,target){\n        let list =  this.eventMap[eventName];\n        // cc.log('EventDispatcher has ',eventName,list)\n        if(list){\n            for (let index = 0; index < list.length; index++) {\n                const element = list[index];\n                if(element.handler === callback && element.target === target){\n                    return element;\n                }\n            }\n        }        \n        return null;\n    }\n\n    removeEventListener(eventName ,callback,target){\n        let list=  this.eventMap[eventName];\n        if(list){\n            for (let index = 0; index < list.length; index++) {\n                const element = list[index];\n                if(element.handler === callback && element.target === target){\n                    list.splice(index,1);\n                    return;\n                }\n            }\n        }         \n    }\n\n     publish(eventName,data,data2,data3){\n        let list =  this.eventMap[eventName];\n        if(list){\n            list.forEach(element => {\n                element.handler.call(element.target,data,data2,data3);\n            });\n        }\n    }\n\n    removeAllEventListener(){\n        this.eventMap = {};\n    }\n\n    removeEventListenerByName(eventName){\n        this.eventMap[eventName] = []\n    }\n\n}"]}